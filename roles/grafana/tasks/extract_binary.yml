---
- name: Download and unarchive the binary
  ansible.builtin.unarchive:
    src: "{{ source_url }}/{{ suffix_url }}"
    dest: "{{ tmp_dir }}"
    remote_src: true
    owner: root
    group: root
    mode: "0755"

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Check if Grafana service exists and is active
  ansible.builtin.set_fact:
    grafana_service_active: >-
      {{ ansible_facts.services.get(service_identifier + '.service', {}).state | default('') == 'running' }}

- name: Stop Grafana service if active
  ansible.builtin.systemd:
    name: "{{ service_identifier }}"
    state: stopped
  when: grafana_service_active

- name: Copy the binary file
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ extracted_binary_path }}/bin"
    dest: "{{ binary_dest_path }}"
    remote_src: true
    owner: root
    group: root
    force: true
    mode: "0755"
  notify:
    - Restart service

- name: Copy the public folder
  ansible.builtin.copy:
    src: "{{ tmp_dir }}/{{ extracted_binary_path }}/public"
    dest: "{{ grafana_home_dir }}"
    remote_src: true
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    force: true
    mode: "0755"

- name: Clean up the temporary files in /tmp
  ansible.builtin.file:
    path: "{{ tmp_dir }}/{{ extracted_binary_dir }}"
    state: absent
